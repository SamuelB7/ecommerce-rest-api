// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DeliveryStatus {
  PENDING
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  password  String
  address   String?
  role      Role       @default(USER)
  Order     Order[]
  Payment   Payment[]
  Delivery  Delivery[]
  Rating    Rating[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  images       ProductImage[]
  Rating       Rating[]
  ProductOrder ProductOrder[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  url       String
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_images")
}

model Order {
  id           String         @id @default(uuid())
  status       OrderStatus    @default(PENDING)
  userId       String         @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  Payment      Payment[]
  Delivery     Delivery[]
  ProductOrder ProductOrder[]
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@map("orders")
}

model ProductOrder {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_orders")
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @map("order_id")
  userId    String        @map("user_id")
  amount    Float
  status    PaymentStatus @default(PENDING)
  user      User          @relation(fields: [userId], references: [id])
  order     Order         @relation(fields: [orderId], references: [id])
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("payments")
}

model Delivery {
  id          String         @id @default(uuid())
  status      DeliveryStatus @default(PENDING)
  address     String
  deliveredAt DateTime?      @map("delivered_at")
  orderId     String         @map("order_id")
  userId      String         @map("user_id")
  user        User           @relation(fields: [userId], references: [id])
  order       Order          @relation(fields: [orderId], references: [id])
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@map("deliveries")
}

model Rating {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  productId   String   @map("product_id")
  rating      Int
  description String?
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("ratings")
}
